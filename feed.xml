<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://www.sulemanji.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sulemanji.com/" rel="alternate" type="text/html" /><updated>2025-03-30T01:23:12+00:00</updated><id>https://www.sulemanji.com/feed.xml</id><title type="html">Suleman Manji</title><subtitle>Enterprise Technology Strategy | Cloud Architecture | Process Automation</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="https://www.sulemanji.com/jekyll/update/2025/03/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-03-26T16:52:59+00:00</published><updated>2025-03-26T16:52:59+00:00</updated><id>https://www.sulemanji.com/jekyll/update/2025/03/26/welcome-to-jekyll</id><content type="html" xml:base="https://www.sulemanji.com/jekyll/update/2025/03/26/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Leveraging Microsoft Graph API for Enterprise Automation</title><link href="https://www.sulemanji.com/development/microsoft/automation/2025/03/15/leveraging-microsoft-graph-api.html" rel="alternate" type="text/html" title="Leveraging Microsoft Graph API for Enterprise Automation" /><published>2025-03-15T00:00:00+00:00</published><updated>2025-03-15T00:00:00+00:00</updated><id>https://www.sulemanji.com/development/microsoft/automation/2025/03/15/leveraging-microsoft-graph-api</id><content type="html" xml:base="https://www.sulemanji.com/development/microsoft/automation/2025/03/15/leveraging-microsoft-graph-api.html"><![CDATA[<h1 id="leveraging-microsoft-graph-api-for-enterprise-automation">Leveraging Microsoft Graph API for Enterprise Automation</h1>

<p>Microsoft Graph API provides a unified programmability model that can be used to access tremendous amounts of data in Microsoft 365, Windows 10, and Enterprise Mobility + Security. Despite its power, many developers still struggle with the complexities of authentication, permission management, and efficient query construction when working with Graph API.</p>

<p>In this article, I’ll share some practical techniques for leveraging Graph API in enterprise automation scenarios based on my experience developing the <a href="https://github.com/ssmanji89/graph-tools">Graph Tools</a> package.</p>

<h2 id="understanding-the-graph-api-architecture">Understanding the Graph API Architecture</h2>

<p>At its core, Microsoft Graph is a RESTful web API that uses OAuth 2.0 for authentication and OData for query parameters. It acts as a unified gateway to various Microsoft services:</p>

<ul>
  <li>Office 365 services (Exchange, SharePoint, Teams)</li>
  <li>Azure AD identity services</li>
  <li>Intune device management</li>
  <li>Windows 10 services</li>
</ul>

<p>The beauty of Graph is that it abstracts away the underlying service complexities, providing a consistent interface across all these services.</p>

<h2 id="authentication-best-practices">Authentication Best Practices</h2>

<p>The most common challenge when working with Graph API is authentication. Here are some key patterns to consider:</p>

<h3 id="1-client-credentials-flow-app-only">1. Client Credentials Flow (App-Only)</h3>

<p>For background services or daemon applications without a user context:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Using the graph-tools package</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">GraphClient</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">graph-tools</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphClient</span><span class="p">({</span>
  <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">clientId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-client-id</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">clientSecret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-client-secret</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tenantId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-tenant-id</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// Access resources with application permissions</span>
<span class="kd">const</span> <span class="nx">sites</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">getAll</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="2-authorization-code-flow-user-delegated">2. Authorization Code Flow (User Delegated)</h3>

<p>For applications acting on behalf of a signed-in user:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Configure auth with user delegation</span>
<span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphClient</span><span class="p">({</span>
  <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">clientId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-client-id</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">redirectUri</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-redirect-uri</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">scopes</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">User.Read</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mail.ReadWrite</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// Handle redirect and token acquisition</span>
<span class="c1">// ...</span>

<span class="c1">// Access resources on behalf of user</span>
<span class="kd">const</span> <span class="nx">messages</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">me</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="kd">get</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="efficient-query-construction">Efficient Query Construction</h2>

<p>Graph API queries can become complex, especially when filtering, expanding, or selecting specific properties. Here are some techniques to make query construction more efficient:</p>

<h3 id="using-the-fluent-interface-pattern">Using the Fluent Interface Pattern</h3>

<p>The fluent interface pattern makes complex queries more readable and maintainable:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Without fluent interface</span>
<span class="c1">// GET /users/john.doe@example.com?$select=displayName,jobTitle&amp;$expand=manager($select=displayName)</span>

<span class="c1">// With fluent interface</span>
<span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">(</span><span class="dl">'</span><span class="s1">john.doe@example.com</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">select</span><span class="p">([</span><span class="dl">'</span><span class="s1">displayName</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">jobTitle</span><span class="dl">'</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">expand</span><span class="p">(</span><span class="dl">'</span><span class="s1">manager</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">displayName</span><span class="dl">'</span><span class="p">])</span>
  <span class="p">.</span><span class="kd">get</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="batch-requests-for-performance">Batch Requests for Performance</h3>

<p>When you need to make multiple requests, batch them together to reduce network overhead:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">batchResults</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">batch</span><span class="p">([</span>
  <span class="nx">graph</span><span class="p">.</span><span class="nx">me</span><span class="p">.</span><span class="kd">get</span><span class="p">(),</span>
  <span class="nx">graph</span><span class="p">.</span><span class="nx">me</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="kd">get</span><span class="p">(),</span>
  <span class="nx">graph</span><span class="p">.</span><span class="nx">me</span><span class="p">.</span><span class="nx">drive</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="kd">get</span><span class="p">()</span>
<span class="p">]);</span>

<span class="c1">// Access results</span>
<span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="nx">batchResults</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">messages</span> <span class="o">=</span> <span class="nx">batchResults</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">batchResults</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</code></pre></div></div>

<h2 id="handling-permissions-and-consent">Handling Permissions and Consent</h2>

<p>Graph API permissions can be complex, especially in enterprise environments. Here are some strategies for managing them effectively:</p>

<h3 id="least-privilege-principle">Least Privilege Principle</h3>

<p>Always request only the permissions your application needs:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad practice - requesting too many permissions</span>
<span class="kd">const</span> <span class="nx">scopes</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Directory.ReadWrite.All</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Files.ReadWrite.All</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mail.ReadWrite</span><span class="dl">'</span><span class="p">];</span>

<span class="c1">// Better practice - minimal required permissions</span>
<span class="kd">const</span> <span class="nx">scopes</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">User.Read</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mail.Read</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Files.Read</span><span class="dl">'</span><span class="p">];</span>
</code></pre></div></div>

<h3 id="incremental-consent">Incremental Consent</h3>

<p>Request permissions as they’re needed rather than all at once:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Initial minimal permissions</span>
<span class="kd">const</span> <span class="nx">initialScopes</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">User.Read</span><span class="dl">'</span><span class="p">];</span>

<span class="c1">// Later, request additional permissions when needed</span>
<span class="kd">const</span> <span class="nx">additionalScopes</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Mail.Read</span><span class="dl">'</span><span class="p">];</span>
<span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">requestAdditionalConsent</span><span class="p">(</span><span class="nx">additionalScopes</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="real-world-automation-examples">Real-World Automation Examples</h2>

<p>Let’s look at some practical examples of Graph API automation in enterprise environments:</p>

<h3 id="example-1-user-onboarding-automation">Example 1: User Onboarding Automation</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">onboardNewEmployee</span><span class="p">(</span><span class="nx">userData</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Create user account</span>
  <span class="kd">const</span> <span class="nx">newUser</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">displayName</span><span class="p">:</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
    <span class="na">mailNickname</span><span class="p">:</span> <span class="nx">userData</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span>
    <span class="na">userPrincipalName</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">userData</span><span class="p">.</span><span class="nx">alias</span><span class="p">}</span><span class="s2">@contoso.com`</span><span class="p">,</span>
    <span class="na">passwordProfile</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">password</span><span class="p">:</span> <span class="nx">generateSecurePassword</span><span class="p">(),</span>
      <span class="na">forceChangePasswordNextSignIn</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">accountEnabled</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>
  
  <span class="c1">// Add to appropriate groups</span>
  <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">groups</span><span class="p">(</span><span class="nx">userData</span><span class="p">.</span><span class="nx">departmentGroup</span><span class="p">).</span><span class="nx">members</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">newUser</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
  
  <span class="c1">// Create OneDrive folder structure</span>
  <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">(</span><span class="nx">newUser</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">drive</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">createFolder</span><span class="p">(</span><span class="dl">'</span><span class="s1">Projects</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">(</span><span class="nx">newUser</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">drive</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">createFolder</span><span class="p">(</span><span class="dl">'</span><span class="s1">Training</span><span class="dl">'</span><span class="p">);</span>
  
  <span class="c1">// Send welcome email</span>
  <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">(</span><span class="dl">'</span><span class="s1">hr@contoso.com</span><span class="dl">'</span><span class="p">).</span><span class="nx">sendMail</span><span class="p">({</span>
    <span class="na">toRecipients</span><span class="p">:</span> <span class="p">[{</span> <span class="na">emailAddress</span><span class="p">:</span> <span class="p">{</span> <span class="na">address</span><span class="p">:</span> <span class="nx">newUser</span><span class="p">.</span><span class="nx">userPrincipalName</span> <span class="p">}</span> <span class="p">}],</span>
    <span class="na">subject</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Welcome to Contoso!</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">content</span><span class="p">:</span> <span class="s2">`Welcome </span><span class="p">${</span><span class="nx">userData</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">! Your account has been set up...`</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Text</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">});</span>
  
  <span class="k">return</span> <span class="nx">newUser</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="example-2-security-compliance-reporting">Example 2: Security Compliance Reporting</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">generateSecurityReport</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Get users without MFA</span>
  <span class="kd">const</span> <span class="nx">usersWithoutMFA</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">reports</span><span class="p">.</span><span class="nx">getCredentialUserRegistrationDetails</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="dl">"</span><span class="s2">isMfaRegistered eq false</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">();</span>
  
  <span class="c1">// Get devices without compliance</span>
  <span class="kd">const</span> <span class="nx">nonCompliantDevices</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">deviceManagement</span><span class="p">.</span><span class="nx">managedDevices</span>
    <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="dl">"</span><span class="s2">complianceState eq 'noncompliant'</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">();</span>
  
  <span class="c1">// Get recent sign-in risks</span>
  <span class="kd">const</span> <span class="nx">riskySignIns</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">graph</span><span class="p">.</span><span class="nx">identityProtection</span><span class="p">.</span><span class="nx">riskDetections</span>
    <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="dl">"</span><span class="s2">riskState eq 'confirmedCompromised'</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">();</span>
  
  <span class="c1">// Compile report</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">mfaStatus</span><span class="p">:</span> <span class="nx">usersWithoutMFA</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">u</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">user</span><span class="p">:</span> <span class="nx">u</span><span class="p">.</span><span class="nx">userPrincipalName</span><span class="p">,</span>
      <span class="na">registrationStatus</span><span class="p">:</span> <span class="nx">u</span><span class="p">.</span><span class="nx">isMfaRegistered</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">Registered</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">Not Registered</span><span class="dl">'</span>
    <span class="p">})),</span>
    <span class="na">deviceCompliance</span><span class="p">:</span> <span class="nx">nonCompliantDevices</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">device</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">deviceName</span><span class="p">,</span>
      <span class="na">owner</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">userPrincipalName</span><span class="p">,</span>
      <span class="na">compliance</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">complianceState</span>
    <span class="p">})),</span>
    <span class="na">securityRisks</span><span class="p">:</span> <span class="nx">riskySignIns</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">r</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">user</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">userPrincipalName</span><span class="p">,</span>
      <span class="na">riskType</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">riskType</span><span class="p">,</span>
      <span class="na">detectedDateTime</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">detectedDateTime</span>
    <span class="p">}))</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="error-handling-and-resilience">Error Handling and Resilience</h2>

<p>Robust error handling is critical for production applications. Here’s a pattern for resilient Graph API calls:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">resilientGraphCall</span><span class="p">(</span><span class="nx">graphCall</span><span class="p">,</span> <span class="nx">maxRetries</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">retries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  
  <span class="k">while</span> <span class="p">(</span><span class="nx">retries</span> <span class="o">&lt;</span> <span class="nx">maxRetries</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">await</span> <span class="nx">graphCall</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Detect types of errors that might benefit from retry</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">429</span> <span class="o">||</span> <span class="nx">error</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Exponential backoff</span>
        <span class="kd">const</span> <span class="nx">delay</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">retries</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Retry </span><span class="p">${</span><span class="nx">retries</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">maxRetries</span><span class="p">}</span><span class="s2"> after </span><span class="p">${</span><span class="nx">delay</span><span class="p">}</span><span class="s2">ms`</span><span class="p">);</span>
        <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">delay</span><span class="p">));</span>
        <span class="nx">retries</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// Non-retriable error</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Failed after </span><span class="p">${</span><span class="nx">maxRetries</span><span class="p">}</span><span class="s2"> retries`</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">resilientGraphCall</span><span class="p">(()</span> <span class="o">=&gt;</span> 
  <span class="nx">graph</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="mi">100</span><span class="p">).</span><span class="kd">get</span><span class="p">()</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="monitoring-and-telemetry">Monitoring and Telemetry</h2>

<p>For enterprise applications, monitoring Graph API usage is essential:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add telemetry to Graph client</span>
<span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphClient</span><span class="p">({</span>
  <span class="c1">// ... auth config</span>
  <span class="na">middleware</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
      <span class="kd">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
      
      <span class="k">return</span> <span class="nx">next</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">duration</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Graph API Call: </span><span class="p">${</span><span class="nx">endpoint</span><span class="p">}</span><span class="s2"> - </span><span class="p">${</span><span class="nx">duration</span><span class="p">}</span><span class="s2">ms`</span><span class="p">);</span>
        
        <span class="c1">// Send telemetry to your monitoring system</span>
        <span class="nx">sendTelemetry</span><span class="p">({</span>
          <span class="nx">endpoint</span><span class="p">,</span>
          <span class="nx">duration</span><span class="p">,</span>
          <span class="na">statusCode</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span>
          <span class="na">success</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">400</span>
        <span class="p">});</span>
        
        <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Microsoft Graph API offers tremendous power for enterprise automation, but it requires thoughtful implementation to address authentication, permission management, and query efficiency challenges. By adopting the patterns shown in this article, you can build more resilient, secure, and maintainable Graph integrations.</p>

<p>For pre-built solutions to many of these challenges, check out the <a href="https://github.com/ssmanji89/graph-tools">Graph Tools</a> package, which implements many of these patterns with a developer-friendly interface.</p>

<p>In future articles, I’ll dive deeper into specific Graph API scenarios, including Teams automation, conditional access policy management, and advanced security monitoring.</p>

<hr />

<p>Have questions or feedback about Microsoft Graph API integration? <a href="mailto:ssmanji89@gmail.com">Contact me</a> or join the discussion in the comments below.</p>]]></content><author><name>Suleman Manji</name></author><category term="development" /><category term="microsoft" /><category term="automation" /><category term="microsoft-graph" /><category term="powershell" /><category term="node-js" /><category term="api" /><category term="automation" /><summary type="html"><![CDATA[Leveraging Microsoft Graph API for Enterprise Automation]]></summary></entry><entry><title type="html">PowerShell Automation Best Practices for Microsoft 365</title><link href="https://www.sulemanji.com/development/microsoft/automation/2025/02/10/powershell-automation-best-practices.html" rel="alternate" type="text/html" title="PowerShell Automation Best Practices for Microsoft 365" /><published>2025-02-10T00:00:00+00:00</published><updated>2025-02-10T00:00:00+00:00</updated><id>https://www.sulemanji.com/development/microsoft/automation/2025/02/10/powershell-automation-best-practices</id><content type="html" xml:base="https://www.sulemanji.com/development/microsoft/automation/2025/02/10/powershell-automation-best-practices.html"><![CDATA[<h1 id="powershell-automation-best-practices-for-microsoft-365">PowerShell Automation Best Practices for Microsoft 365</h1>

<p>PowerShell has become an indispensable tool for Microsoft 365 administrators and developers, providing powerful capabilities for automating repetitive tasks, managing resources at scale, and implementing complex workflows. However, writing efficient, secure, and maintainable PowerShell scripts requires more than basic scripting knowledge.</p>

<p>In this article, I’ll share best practices and patterns that I’ve developed over years of creating PowerShell automation for enterprise Microsoft 365 environments.</p>

<h2 id="modular-script-design">Modular Script Design</h2>

<p>One of the most important aspects of maintainable PowerShell automation is modular design. Breaking your scripts into reusable functions makes them easier to test, maintain, and share.</p>

<h3 id="function-structure-pattern">Function Structure Pattern</h3>

<p>Follow a consistent structure for your functions:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Verb-Noun</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">,</span><span class="w"> 
                   </span><span class="n">ValueFromPipeline</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">,</span><span class="w">
                   </span><span class="n">HelpMessage</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Description of parameter"</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">ValidateNotNullOrEmpty</span><span class="p">()]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$RequiredParam</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$OptionalParam</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DefaultValue"</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="kr">begin</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Initialize resources, connect to services</span><span class="w">
        </span><span class="n">Write-Verbose</span><span class="w"> </span><span class="s2">"Starting Verb-Noun operation"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
    </span><span class="kr">process</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="c"># Main function logic</span><span class="w">
            </span><span class="n">Write-Verbose</span><span class="w"> </span><span class="s2">"Processing </span><span class="nv">$RequiredParam</span><span class="s2">"</span><span class="w">
            </span><span class="c"># ...</span><span class="w">
        </span><span class="p">}</span><span class="w">
        </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Error in Verb-Noun: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
            </span><span class="kr">throw</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
    </span><span class="kr">end</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Clean up resources</span><span class="w">
        </span><span class="n">Write-Verbose</span><span class="w"> </span><span class="s2">"Completed Verb-Noun operation"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="creating-reusable-modules">Creating Reusable Modules</h3>

<p>Group related functions into modules for easier reuse:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Save as M365Management.psm1</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Connect-M365Services</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">pscredential</span><span class="p">]</span><span class="nv">$Credential</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">switch</span><span class="p">]</span><span class="nv">$ExchangeOnline</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">switch</span><span class="p">]</span><span class="nv">$SharePointOnline</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">switch</span><span class="p">]</span><span class="nv">$Teams</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="c"># Connection logic for each service</span><span class="w">
    </span><span class="c"># ...</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">Get-M365UserReport</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c"># Report generation logic</span><span class="w">
    </span><span class="c"># ...</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c"># Export functions</span><span class="w">
</span><span class="n">Export-ModuleMember</span><span class="w"> </span><span class="nt">-Function</span><span class="w"> </span><span class="nx">Connect-M365Services</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-M365UserReport</span><span class="w">
</span></code></pre></div></div>

<h2 id="secure-authentication">Secure Authentication</h2>

<p>Security should be a top priority in your PowerShell scripts, especially when they interact with Microsoft 365 services.</p>

<h3 id="modern-authentication">Modern Authentication</h3>

<p>Always use modern authentication methods instead of basic authentication:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Connect to Exchange Online with modern auth</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Connect-ExchangeOnlineSecure</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="p">()</span><span class="w">
    
    </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Check for EXO V2 module</span><span class="w">
        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">Get-Module</span><span class="w"> </span><span class="nt">-ListAvailable</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">ExchangeOnlineManagement</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Exchange Online Management module not found. Install using: Install-Module ExchangeOnlineManagement -Force"</span><span class="w">
            </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="c"># Import module</span><span class="w">
        </span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">ExchangeOnlineManagement</span><span class="w">
        
        </span><span class="c"># Connect using modern authentication</span><span class="w">
        </span><span class="n">Connect-ExchangeOnline</span><span class="w"> </span><span class="nt">-ShowProgress</span><span class="w"> </span><span class="bp">$true</span><span class="w">
        
        </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Failed to connect to Exchange Online: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
        </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="handling-credentials-securely">Handling Credentials Securely</h3>

<p>Never hardcode credentials in your scripts:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Bad practice</span><span class="w">
</span><span class="nv">$username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"admin@contoso.com"</span><span class="w">
</span><span class="nv">$password</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"PlainTextPassword"</span><span class="w"> 
</span><span class="nv">$secPassword</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nv">$password</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="nv">$credential</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="w"> </span><span class="nv">$secPassword</span><span class="p">)</span><span class="w">

</span><span class="c"># Better practice - retrieve from certificate</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Get-CertificateCredential</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$CertificateThumbprint</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$TenantId</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$ApplicationId</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nv">$certificate</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Item</span><span class="w"> </span><span class="s2">"Cert:\CurrentUser\My\</span><span class="nv">$CertificateThumbprint</span><span class="s2">"</span><span class="w">
        
        </span><span class="n">Connect-MgGraph</span><span class="w"> </span><span class="nt">-TenantId</span><span class="w"> </span><span class="nv">$TenantId</span><span class="w"> </span><span class="nt">-ClientId</span><span class="w"> </span><span class="nv">$ApplicationId</span><span class="w"> </span><span class="nt">-Certificate</span><span class="w"> </span><span class="nv">$certificate</span><span class="w">
        
        </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Failed to authenticate using certificate: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
        </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="error-handling-and-logging">Error Handling and Logging</h2>

<p>Robust error handling and logging are essential for troubleshooting and monitoring your scripts.</p>

<h3 id="structured-error-handling">Structured Error Handling</h3>

<p>Implement structured error handling in all your scripts:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Set-UserLicenses</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$UserPrincipalName</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">[]]</span><span class="nv">$LicenseSkuIds</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Main logic</span><span class="w">
        </span><span class="n">Write-Verbose</span><span class="w"> </span><span class="s2">"Assigning licenses to </span><span class="nv">$UserPrincipalName</span><span class="s2">"</span><span class="w">
        </span><span class="c"># ...</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">[</span><span class="n">Microsoft.Open.AzureAD16.Client.ApiException</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Handle Azure AD specific errors</span><span class="w">
        </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Azure AD error: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
        </span><span class="kr">throw</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">[</span><span class="n">System.Net.WebException</span><span class="p">]</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Handle connectivity issues</span><span class="w">
        </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Network error: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
        </span><span class="kr">throw</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Handle other errors</span><span class="w">
        </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"Unexpected error: </span><span class="bp">$_</span><span class="s2">"</span><span class="w">
        </span><span class="kr">throw</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">finally</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Clean up code that always runs</span><span class="w">
        </span><span class="n">Write-Verbose</span><span class="w"> </span><span class="s2">"License operation completed."</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="comprehensive-logging">Comprehensive Logging</h3>

<p>Implement proper logging that captures important details:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Write-Log</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Message</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">ValidateSet</span><span class="p">(</span><span class="s1">'Info'</span><span class="p">,</span><span class="s1">'Warning'</span><span class="p">,</span><span class="s1">'Error'</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Info'</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$LogFilePath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"C:\Logs\M365Automation_</span><span class="si">$(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s1">'yyyyMMdd'</span><span class="p">)</span><span class="o">.</span><span class="nf">log</span><span class="s2">"
    )
    
    # Create timestamp
    </span><span class="nv">$timestamp</span><span class="s2"> = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    
    # Format log entry
    </span><span class="nv">$logEntry</span><span class="s2"> = "</span><span class="p">[</span><span class="nv">$timestamp</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="nv">$Level</span><span class="p">]</span><span class="w"> </span><span class="nv">$Message</span><span class="s2">"
    
    # Ensure log directory exists
    </span><span class="nv">$logDir</span><span class="s2"> = Split-Path -Path </span><span class="nv">$LogFilePath</span><span class="s2"> -Parent
    if (!(Test-Path -Path </span><span class="nv">$logDir</span><span class="s2">)) {
        New-Item -Path </span><span class="nv">$logDir</span><span class="s2"> -ItemType Directory -Force | Out-Null
    }
    
    # Write to log file
    Add-Content -Path </span><span class="nv">$LogFilePath</span><span class="s2"> -Value </span><span class="nv">$logEntry</span><span class="s2">
    
    # Output to console with color
    switch (</span><span class="nv">$Level</span><span class="s2">) {
        'Info'    { Write-Host </span><span class="nv">$logEntry</span><span class="s2"> -ForegroundColor Cyan }
        'Warning' { Write-Host </span><span class="nv">$logEntry</span><span class="s2"> -ForegroundColor Yellow }
        'Error'   { Write-Host </span><span class="nv">$logEntry</span><span class="s2"> -ForegroundColor Red }
    }
}

# Usage
function Update-UserSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = </span><span class="bp">$true</span><span class="s2">)]
        [string[]]</span><span class="nv">$UserIds</span><span class="s2">
    )
    
    Write-Log "</span><span class="n">Starting</span><span class="w"> </span><span class="nx">batch</span><span class="w"> </span><span class="nx">update</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="nv">$UserIds</span><span class="o">.</span><span class="nf">Count</span><span class="si">)</span><span class="s2"> users"</span><span class="w">
    
    </span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$userId</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$UserIds</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="c"># Update logic</span><span class="w">
            </span><span class="n">Write-Log</span><span class="w"> </span><span class="s2">"Processing user </span><span class="nv">$userId</span><span class="s2">"</span><span class="w"> </span><span class="nt">-Level</span><span class="w"> </span><span class="s1">'Info'</span><span class="w">
        </span><span class="p">}</span><span class="w">
        </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="n">Write-Log</span><span class="w"> </span><span class="s2">"Failed to update user </span><span class="nv">$userId</span><span class="s2">: </span><span class="bp">$_</span><span class="s2">"</span><span class="w"> </span><span class="nt">-Level</span><span class="w"> </span><span class="s1">'Error'</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
    </span><span class="n">Write-Log</span><span class="w"> </span><span class="s2">"Batch update completed"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="performance-optimization">Performance Optimization</h2>

<p>Optimizing script performance becomes crucial when working with large Microsoft 365 tenants.</p>

<h3 id="batch-processing">Batch Processing</h3>

<p>Process items in batches to improve performance:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Set-BulkUserProperties</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$CsvFilePath</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="nv">$BatchSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">50</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="c"># Import CSV</span><span class="w">
    </span><span class="nv">$users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Import-Csv</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$CsvFilePath</span><span class="w">
    </span><span class="nv">$totalUsers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$users</span><span class="o">.</span><span class="nf">Count</span><span class="w">
    </span><span class="nv">$processedUsers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="w">
    
    </span><span class="c"># Process in batches</span><span class="w">
    </span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$totalUsers</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="nv">$BatchSize</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nv">$userBatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$users</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-Skip</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="nt">-First</span><span class="w"> </span><span class="nv">$BatchSize</span><span class="w">
        
        </span><span class="c"># Process the batch</span><span class="w">
        </span><span class="nv">$batchTasks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">@()</span><span class="w">
        </span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$user</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$userBatch</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nv">$batchTasks</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">Update-UserPropertiesAsync</span><span class="w"> </span><span class="nt">-User</span><span class="w"> </span><span class="nv">$user</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="c"># Wait for all batch operations to complete</span><span class="w">
        </span><span class="nv">$results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Wait-Job</span><span class="w"> </span><span class="nt">-Job</span><span class="w"> </span><span class="nv">$batchTasks</span><span class="w">
        
        </span><span class="c"># Update progress</span><span class="w">
        </span><span class="nv">$processedUsers</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="nv">$userBatch</span><span class="o">.</span><span class="nf">Count</span><span class="w">
        </span><span class="nv">$percentComplete</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nv">$processedUsers</span><span class="w"> </span><span class="n">/</span><span class="w"> </span><span class="nv">$totalUsers</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w">
        </span><span class="n">Write-Progress</span><span class="w"> </span><span class="nt">-Activity</span><span class="w"> </span><span class="s2">"Updating User Properties"</span><span class="w"> </span><span class="nt">-Status</span><span class="w"> </span><span class="s2">"</span><span class="nv">$processedUsers</span><span class="s2"> of </span><span class="nv">$totalUsers</span><span class="s2"> users processed"</span><span class="w"> </span><span class="nt">-PercentComplete</span><span class="w"> </span><span class="nv">$percentComplete</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
    </span><span class="n">Write-Progress</span><span class="w"> </span><span class="nt">-Activity</span><span class="w"> </span><span class="s2">"Updating User Properties"</span><span class="w"> </span><span class="nt">-Completed</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="parallel-processing">Parallel Processing</h3>

<p>Use parallel processing for independent operations:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Get-AllSiteCollectionSizes</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="nv">$ThrottleLimit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="c"># Connect to SharePoint Online</span><span class="w">
    </span><span class="n">Connect-PnPOnline</span><span class="w"> </span><span class="nt">-Url</span><span class="w"> </span><span class="s2">"https://contoso-admin.sharepoint.com"</span><span class="w"> </span><span class="nt">-Interactive</span><span class="w">
    
    </span><span class="c"># Get all site collections</span><span class="w">
    </span><span class="nv">$siteCollections</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-PnPTenantSite</span><span class="w">
    
    </span><span class="c"># Process sites in parallel</span><span class="w">
    </span><span class="nv">$siteCollections</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="nt">-ThrottleLimit</span><span class="w"> </span><span class="nv">$ThrottleLimit</span><span class="w"> </span><span class="nt">-Parallel</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nv">$site</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$_</span><span class="w">
        
        </span><span class="c"># Connect to the specific site</span><span class="w">
        </span><span class="n">Connect-PnPOnline</span><span class="w"> </span><span class="nt">-Url</span><span class="w"> </span><span class="nv">$site</span><span class="o">.</span><span class="nf">Url</span><span class="w"> </span><span class="nt">-Interactive</span><span class="w">
        
        </span><span class="c"># Get site size and other properties</span><span class="w">
        </span><span class="nv">$siteData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">PSCustomObject</span><span class="p">]@{</span><span class="w">
            </span><span class="nx">Url</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$site</span><span class="err">.</span><span class="nx">Url</span><span class="w">
            </span><span class="nx">Title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$site</span><span class="err">.</span><span class="nx">Title</span><span class="w">
            </span><span class="nx">StorageUsageMB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">math</span><span class="p">]</span><span class="err">::</span><span class="nx">Round</span><span class="err">(</span><span class="nv">$site</span><span class="err">.</span><span class="nx">StorageUsageCurrent</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="err">)</span><span class="w">
            </span><span class="nx">LastModified</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$site</span><span class="err">.</span><span class="nx">LastContentModifiedDate</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="c"># Output the result</span><span class="w">
        </span><span class="nv">$siteData</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="automating-microsoft-365-security-tasks">Automating Microsoft 365 Security Tasks</h2>

<p>Security tasks are one of the most common automation scenarios in Microsoft 365 environments.</p>

<h3 id="creating-a-conditional-access-policy">Creating a Conditional Access Policy</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">New-ConditionalAccessPolicy</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$PolicyName</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">[]]</span><span class="nv">$TargetGroups</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$true</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">[]]</span><span class="nv">$TargetApps</span><span class="p">,</span><span class="w">
        
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">switch</span><span class="p">]</span><span class="nv">$RequireMFA</span><span class="w">
    </span><span class="p">)</span><span class="w">
    
    </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="c"># Connect to Microsoft Graph (Authentication handled separately)</span><span class="w">
        
        </span><span class="c"># Create conditions</span><span class="w">
        </span><span class="nv">$conditions</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet</span><span class="w">
        
        </span><span class="c"># Add users</span><span class="w">
        </span><span class="nv">$conditions</span><span class="o">.</span><span class="nf">Users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition</span><span class="w">
        </span><span class="nv">$conditions</span><span class="o">.</span><span class="nf">Users</span><span class="o">.</span><span class="nf">IncludeGroups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$TargetGroups</span><span class="w">
        
        </span><span class="c"># Add applications</span><span class="w">
        </span><span class="nv">$conditions</span><span class="o">.</span><span class="nf">Applications</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition</span><span class="w">
        </span><span class="nv">$conditions</span><span class="o">.</span><span class="nf">Applications</span><span class="o">.</span><span class="nf">IncludeApplications</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$TargetApps</span><span class="w">
        
        </span><span class="c"># Create grant controls</span><span class="w">
        </span><span class="nv">$grantControls</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls</span><span class="w">
        </span><span class="nv">$grantControls</span><span class="o">.</span><span class="nf">Operator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"OR"</span><span class="w">
        
        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$RequireMFA</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nv">$grantControls</span><span class="o">.</span><span class="nf">BuiltInControls</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Mfa"</span><span class="w">
        </span><span class="p">}</span><span class="w">
        
        </span><span class="c"># Create new policy</span><span class="w">
        </span><span class="n">New-AzureADMSConditionalAccessPolicy</span><span class="w"> </span><span class="se">`
</span><span class="w">            </span><span class="nt">-DisplayName</span><span class="w"> </span><span class="nv">$PolicyName</span><span class="w"> </span><span class="se">`
</span><span class="w">            </span><span class="nt">-State</span><span class="w"> </span><span class="s2">"Enabled"</span><span class="w"> </span><span class="se">`
</span><span class="w">            </span><span class="nt">-Conditions</span><span class="w"> </span><span class="nv">$conditions</span><span class="w"> </span><span class="se">`
</span><span class="w">            </span><span class="nt">-GrantControls</span><span class="w"> </span><span class="nv">$grantControls</span><span class="w">
        
        </span><span class="n">Write-Log</span><span class="w"> </span><span class="s2">"Created conditional access policy: </span><span class="nv">$PolicyName</span><span class="s2">"</span><span class="w"> </span><span class="nt">-Level</span><span class="w"> </span><span class="s1">'Info'</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">Write-Log</span><span class="w"> </span><span class="s2">"Failed to create conditional access policy: </span><span class="bp">$_</span><span class="s2">"</span><span class="w"> </span><span class="nt">-Level</span><span class="w"> </span><span class="s1">'Error'</span><span class="w">
        </span><span class="kr">throw</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="security-report-generation">Security Report Generation</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Get-SecurityComplianceReport</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">[</span><span class="n">CmdletBinding</span><span class="p">()]</span><span class="w">
    </span><span class="kr">param</span><span class="w"> </span><span class="p">(</span><span class="w">
        </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$false</span><span class="p">)]</span><span class="w">
        </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$OutputPath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"C:\Reports\SecurityCompliance_</span><span class="si">$(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s1">'yyyyMMdd'</span><span class="p">)</span><span class="o">.</span><span class="nf">csv</span><span class="s2">"
    )
    
    try {
        # Get users without MFA
        </span><span class="nv">$usersWithoutMFA</span><span class="s2"> = Get-UsersWithoutMFA
        
        # Get accounts with risky sign-ins
        </span><span class="nv">$riskyAccounts</span><span class="s2"> = Get-RiskySignInAccounts
        
        # Get guest accounts
        </span><span class="nv">$guestAccounts</span><span class="s2"> = Get-AzureADUser -Filter "</span><span class="n">userType</span><span class="w"> </span><span class="nx">eq</span><span class="w"> </span><span class="s1">'Guest'</span><span class="s2">"
        
        # Get admin accounts
        </span><span class="nv">$adminAccounts</span><span class="s2"> = Get-AdminAccounts
        
        # Compile report
        </span><span class="nv">$report</span><span class="s2"> = [PSCustomObject]@{
            ReportDate = Get-Date
            UsersWithoutMFA = </span><span class="nv">$usersWithoutMFA</span><span class="s2">.Count
            RiskyAccounts = </span><span class="nv">$riskyAccounts</span><span class="s2">.Count
            GuestAccounts = </span><span class="nv">$guestAccounts</span><span class="s2">.Count
            AdminAccounts = </span><span class="nv">$adminAccounts</span><span class="s2">.Count
            SecurityScore = Get-TenantSecureScore
            CompliancePercentage = Calculate-CompliancePercentage
        }
        
        # Export detailed findings
        </span><span class="nv">$detailedReport</span><span class="s2"> = @()
        
        foreach (</span><span class="nv">$user</span><span class="s2"> in </span><span class="nv">$usersWithoutMFA</span><span class="s2">) {
            </span><span class="nv">$detailedReport</span><span class="s2"> += [PSCustomObject]@{
                UserPrincipalName = </span><span class="nv">$user</span><span class="s2">.UserPrincipalName
                DisplayName = </span><span class="nv">$user</span><span class="s2">.DisplayName
                Finding = "</span><span class="nx">Missing</span><span class="w"> </span><span class="nx">MFA</span><span class="s2">"
                RiskLevel = "</span><span class="nx">High</span><span class="s2">"
                RecommendedAction = "</span><span class="nx">Enable</span><span class="w"> </span><span class="nx">MFA</span><span class="s2">"
            }
        }
        
        # Add other findings
        # ...
        
        # Export to CSV
        </span><span class="nv">$detailedReport</span><span class="s2"> | Export-Csv -Path </span><span class="nv">$OutputPath</span><span class="s2"> -NoTypeInformation
        
        return </span><span class="nv">$report</span><span class="s2">
    }
    catch {
        Write-Log "</span><span class="nx">Failed</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">generate</span><span class="w"> </span><span class="nx">security</span><span class="w"> </span><span class="nx">compliance</span><span class="w"> </span><span class="nx">report:</span><span class="w"> </span><span class="bp">$_</span><span class="s2">" -Level 'Error'
        throw
    }
}
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>PowerShell remains an essential tool for Microsoft 365 automation, providing powerful capabilities for managing and securing your environment. By following these best practices for modular design, secure authentication, error handling, and performance optimization, you can create more reliable and maintainable automation solutions.</p>

<p>In future articles, I’ll dive deeper into specific Microsoft 365 automation scenarios, including Teams governance, Exchange Online management, and SharePoint site provisioning.</p>

<hr />

<p>Do you have questions about PowerShell automation for Microsoft 365? <a href="mailto:ssmanji89@gmail.com">Contact me</a> or share your thoughts in the comments below.</p>]]></content><author><name>Suleman Manji</name></author><category term="development" /><category term="microsoft" /><category term="automation" /><category term="powershell" /><category term="microsoft-365" /><category term="scripting" /><category term="automation" /><category term="best-practices" /><summary type="html"><![CDATA[PowerShell Automation Best Practices for Microsoft 365]]></summary></entry></feed>