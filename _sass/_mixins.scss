// _mixins.scss
// Reusable mixins for the theme

// Media query mixins
@mixin breakpoint-up($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) { @content; }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
}

@mixin breakpoint-down($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-xs - 1) { @content; }
  } @else if $breakpoint == sm {
    @media (max-width: $breakpoint-sm - 1) { @content; }
  } @else if $breakpoint == md {
    @media (max-width: $breakpoint-md - 1) { @content; }
  } @else if $breakpoint == lg {
    @media (max-width: $breakpoint-lg - 1) { @content; }
  } @else if $breakpoint == xl {
    @media (max-width: $breakpoint-xl - 1) { @content; }
  }
}

// Typography mixins
@mixin font-size($size) {
  font-size: $size;
  line-height: calc(#{$size} * 1.5);
}

// Accessibility mixins
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin visually-hidden-focusable {
  &:not(:focus):not(:focus-within) {
    @include visually-hidden;
  }
}

// Focus styles
@mixin focus-outline {
  outline: 2px solid $color-primary;
  outline-offset: 2px;
}

// Dark mode mixing
@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    .no-js &,
    &.dark-mode,
    .dark-mode & {
      @content;
    }
  }
}

// Container mixin
@mixin container {
  width: 100%;
  max-width: $container-width;
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-base;
  padding-left: $spacing-base;
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Button mixins
@mixin button-base {
  display: inline-block;
  font-weight: $font-weight-medium;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  border: 1px solid transparent;
  padding: $spacing-xsmall $spacing-base;
  font-size: $font-size-base;
  line-height: 1.5;
  border-radius: $border-radius-base;
  transition: $transition-base;
  
  &:focus {
    @include focus-outline;
  }
}

@mixin button-primary {
  @include button-base;
  color: $color-white;
  background-color: $color-primary;
  border-color: $color-primary;
  
  &:hover, &:focus {
    background-color: darken($color-primary, 5%);
    border-color: darken($color-primary, 5%);
  }
}

@mixin button-secondary {
  @include button-base;
  color: $color-white;
  background-color: $color-secondary;
  border-color: $color-secondary;
  
  &:hover, &:focus {
    background-color: darken($color-secondary, 5%);
    border-color: darken($color-secondary, 5%);
  }
}

@mixin button-outline {
  @include button-base;
  color: $color-primary;
  background-color: transparent;
  border-color: $color-primary;
  
  &:hover, &:focus {
    color: $color-white;
    background-color: $color-primary;
    border-color: $color-primary;
  }
}

// Animations
@mixin fade-in {
  animation: fadeIn 0.3s ease-in-out;
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
}

// Truncate text with ellipsis
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Aspect ratio (for responsive embeds)
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: "";
    display: block;
    padding-top: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}